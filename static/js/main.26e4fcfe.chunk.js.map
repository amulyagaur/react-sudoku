{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Box","handleChange","event","props","handleInput","xCoord","yCoord","target","value","this","val","size","onChange","React","Component","Board","handleBoardChange","x","y","v","onChanging","htmljsx","i","j","push","board","key","App","alterState","stateArray","state","slice","parseInt","setState","encodeBoard","reduce","result","row","encodeURIComponent","length","encodeParams","params","Object","keys","map","join","viewResult","solu","sol","checkSol","arr","JSON","stringify","message","setBoard","fetch","level","then","res","json","dd1","data","method","body","headers","response","solution","catch","console","warn","error","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Container","Row","Col","Jumbotron","fluid","DropdownButton","title","Dropdown","Item","onClick","Button","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6WAIMA,E,2MAEJC,aAAe,SAACC,GACd,EAAKC,MAAMC,YAAY,EAAKD,MAAME,OAAO,EAAKF,MAAMG,OAAOJ,EAAMK,OAAOC,Q,wEAIxE,OACA,oCACE,2BAAOA,MAAOC,KAAKN,MAAMO,IAClBC,KAAM,EACNC,SAAUH,KAAKR,oB,GAXVY,IAAMC,WAkBlBC,E,2MAEJC,kBAAoB,SAACC,EAAEC,EAAEC,GACvB,EAAKhB,MAAMiB,WAAWH,EAAEC,EAAEC,I,wEAK1B,IADA,IAAIE,EAAU,GACNC,EAAE,EAAEA,EAAE,EAAEA,IAChB,CACE,IAAI,IAAIC,EAAE,EAAEA,EAAE,EAAEA,IAEdF,EAAQG,KAAK,kBAAC,EAAD,CAAKd,IAAKD,KAAKN,MAAMsB,MAAMH,GAAGC,GAAG,EAAGd,KAAKN,MAAMsB,MAAMH,GAAGC,GAAG,GACtDlB,OAAQiB,EACRhB,OAAQiB,EACRnB,YAAaK,KAAKO,kBAClBU,IAAK,MAAMJ,EAAEC,KAGjCF,EAAQG,KAAK,wBAAIE,IAAK,MAAMJ,KAE9B,OACA,6BACGD,O,GAvBaR,IAAMC,WA+KXa,E,YAhJb,WAAYxB,GAAO,IAAD,8BAChB,4CAAMA,KASRyB,WAAa,SAACX,EAAEC,EAAER,GAChB,IAAImB,EAAa,EAAKC,MAAML,MAAMM,QAClCF,EAAWZ,GAAGC,GAAGc,SAAStB,GAC1B,EAAKuB,SAAS,CACZR,MAAMI,KAdQ,EAkBlBK,YAAc,SAACT,GAAD,OACdA,EAAMU,QAAO,SAACC,EAAQC,EAAKf,GAAd,OAAoBc,EAAM,aAASE,mBAAmBD,GAA5B,cAAsCf,IAAMG,EAAMc,OAAQ,EAAI,GAAK,SAAS,KAnBjG,EAsBlBC,aAAe,SAACC,GAAD,OACfC,OAAOC,KAAKF,GACXG,KAAI,SAAAlB,GAAG,OAAIA,EAAM,IAAN,aAAkB,EAAKQ,YAAYO,EAAOf,IAA1C,UACXmB,KAAK,MAzBY,EA2BlBC,WAAa,WACX,IAAIC,EAAO,EAAKjB,MAAMkB,IAAIjB,QAC1B,EAAKE,SAAS,CACZR,MAAMsB,KA9BQ,EAkClBE,SAAW,WACT,IAAIC,EAAM,EAAKpB,MAAML,MAAMsB,EAAK,EAAKjB,MAAMkB,IACxCG,KAAKC,UAAUF,KAAOC,KAAKC,UAAUL,GACtC,EAAKd,SAAS,CACZoB,QAAQ,wBAGV,EAAKpB,SAAS,CACZoB,QAAQ,2BA1CI,EAuGlBC,SAAU,WACR,EAAKrB,SAAS,CACZR,MAAM,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,MAEjC8B,MAAM,iDAAiD,EAAKzB,MAAM0B,OAC/DC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACrB,GACC,IAAIwB,EAAMxB,EAAOX,MAAMM,QACvB,EAAKE,SAAS,CACZR,MAAOmC,IAET,IAAMC,EAAO,CAACpC,MAAM,EAAKK,MAAML,OAE/B8B,MAAM,qCAAsC,CAC1CO,OAAQ,OACRC,KAAM,EAAKvB,aAAaqB,GACxBG,QAAS,CAAE,eAAgB,uCAE5BP,MAAK,SAAAQ,GAAQ,OAAIA,EAASN,UAC1BF,MAAK,SAAAQ,GAAQ,OAAI,EAAKhC,SAAS,CAC9Be,IAAIiB,EAASC,cAEdC,MAAMC,QAAQC,SAKjB,SAACC,GACC,EAAKrC,SAAS,CACZR,MAAO,WAnIf,EAAKK,MAAQ,CACXL,MAAO,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAChC4B,QAAQ,wBACRL,IAAI,KACJQ,MAAM,QANQ,E,sEA8CT,IAAD,OACN,OACE,6BACC,kBAACe,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACtD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,KAAnB,UACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,0BAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,yBAClB,kBAACC,EAAA,EAAD,KACA,kBAACA,EAAA,EAAIC,KAAL,CAAUN,KAAK,8CAAf,qBAIF,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACJ,EAAA,EAAD,KACE,4BAAK3E,KAAKqB,MAAMuB,WAIpB,kBAACoC,EAAA,EAAD,CAAgBR,GAAG,wBAAwBS,MAAM,qBAC/C,kBAACC,EAAA,EAASC,KAAV,CAAeC,QAAS,WAAK,EAAK5D,SAAS,CACzCuB,MAAM,SAER,EAAKF,aAHL,QAMA,kBAACqC,EAAA,EAASC,KAAV,CAAeC,QAAS,WAAK,EAAK5D,SAAS,CACzCuB,MAAM,WAER,EAAKF,aAHL,UAMA,kBAACqC,EAAA,EAASC,KAAV,CAAeC,QAAS,WAAK,EAAK5D,SAAS,CACzCuB,MAAM,SAER,EAAKF,aAHL,QAIA,kBAACqC,EAAA,EAASC,KAAV,CAAeC,QAAS,WAAK,EAAK5D,SAAS,CACzCuB,MAAM,WAER,EAAKF,aAHL,WAKF,6BACA,kBAACwC,EAAA,EAAD,CAAQnB,QAAQ,kBAAkBkB,QAASpF,KAAKqC,YAAhD,eACA,kBAACgD,EAAA,EAAD,CAAQnB,QAAQ,kBAAkBkB,QAASpF,KAAKwC,UAAhD,mBAEA,kBAACqC,EAAA,EAAD,KACA,6BACA,kBAAC,EAAD,CAAO7D,MAAOhB,KAAKqB,MAAML,MAAOL,WAAYX,KAAKmB,mB,0CA6CzDnB,KAAK6C,e,GA9ISzC,IAAMC,WCvCJiF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,MAAK,SAAAkD,GACjCA,EAAaC,kB","file":"static/js/main.26e4fcfe.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {Container,Navbar,Nav, Row,Col,Jumbotron,DropdownButton,Dropdown,Button} from 'react-bootstrap';\n\nclass Box extends React.Component{\n\n  handleChange = (event)=>{\n    this.props.handleInput(this.props.xCoord,this.props.yCoord,event.target.value);\n  }\n\n  render(){\n    return(\n    <>\n      <input value={this.props.val} \n             size={1}\n             onChange={this.handleChange}\n             ></input>\n    </>\n    );\n  }\n}\n\nclass Board extends React.Component{\n\n  handleBoardChange = (x,y,v)=>{\n    this.props.onChanging(x,y,v);\n  }\n\n  render(){\n    var htmljsx = [];\n    for(var i=0;i<9;i++)\n    {\n      for(var j=0;j<9;j++)\n      {\n        htmljsx.push(<Box val={this.props.board[i][j]>0 ?this.props.board[i][j]:''} \n                          xCoord={i}\n                          yCoord={j}\n                          handleInput={this.handleBoardChange}\n                          key={'key'+i+j}\n                          />);\n      }\n      htmljsx.push(<br key={'key'+i}/>);\n    }\n    return(\n    <div>\n      {htmljsx}\n    </div>\n    );\n  }\n}\n\nclass App extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      board: [[],[],[],[],[],[],[],[],[]],\n      message:'Welcome Brainstormer!',\n      sol:null,\n      level:'easy'\n    }\n  }\n\n  alterState = (x,y,val)=>{\n    var stateArray = this.state.board.slice();\n    stateArray[x][y]=parseInt(val);\n    this.setState({\n      board:stateArray\n    })\n  }\n\n  encodeBoard = (board) => \n  board.reduce((result, row, i) => result + `%5B${encodeURIComponent(row)}%5D${i === board.length -1 ? '' : '%2C'}`, '')\n\n\n  encodeParams = (params) => \n  Object.keys(params)\n  .map(key => key + '=' + `%5B${this.encodeBoard(params[key])}%5D`)\n  .join('&');\n\n  viewResult = ()=>{\n    var solu = this.state.sol.slice();\n    this.setState({\n      board:solu\n    })\n  }\n\n  checkSol = ()=>{\n    var arr = this.state.board,solu=this.state.sol;\n    if(JSON.stringify(arr)===JSON.stringify(solu))\n      this.setState({\n        message:'Correct Solution :)'\n      })\n    else  \n      this.setState({\n        message:'Incorrect Solution :('\n      })\n  }\n\n  render(){\n    return(\n      <div>\n       <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#\">Sudoku</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav>\n          <Nav.Link href=\"https://github.com/amulyagaur/react-sudoku\">View On Github</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n        </Navbar>\n        <Container> \n          <Row>\n            <Col>\n            <Jumbotron fluid>\n              <Container>\n                <h1>{this.state.message}</h1>\n                \n              </Container>\n            </Jumbotron>\n            <DropdownButton id=\"dropdown-basic-button\" title=\"Choose Difficulty\">\n              <Dropdown.Item onClick={()=>{this.setState({\n                level:'easy'\n              });\n              this.setBoard();\n            }\n            }>Easy</Dropdown.Item>\n              <Dropdown.Item onClick={()=>{this.setState({\n                level:'medium'\n              });\n              this.setBoard();\n              }\n              }>Medium</Dropdown.Item>\n              <Dropdown.Item onClick={()=>{this.setState({\n                level:'hard'\n              });\n              this.setBoard();}}>Hard</Dropdown.Item>\n              <Dropdown.Item onClick={()=>{this.setState({\n                level:'random'\n              });\n              this.setBoard();}}>Random</Dropdown.Item>\n            </DropdownButton>\n            <br/>\n            <Button variant=\"outline-success\" onClick={this.viewResult}>View Result</Button>\n            <Button variant=\"outline-warning\" onClick={this.checkSol}>Check Solution</Button>\n            </Col>\n            <Col>\n            <br/>\n            <Board board={this.state.board} onChanging={this.alterState}/>\n            </Col>        \n        </Row>\n        </Container>\n      </div>\n    )\n  }\n\n  setBoard= ()=>{\n    this.setState({\n      board:[[],[],[],[],[],[],[],[],[]]\n    })\n    fetch('https://sugoku.herokuapp.com/board?difficulty='+this.state.level)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          var dd1 = result.board.slice();\n          this.setState({\n            board: dd1\n          });\n          const data = {board:this.state.board}\n\n          fetch('https://sugoku.herokuapp.com/solve', {\n            method: 'POST',\n            body: this.encodeParams(data),\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n          })\n          .then(response => response.json())\n          .then(response => this.setState({\n            sol:response.solution\n          }))\n          .catch(console.warn)\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            board: null\n          });\n        }\n      )\n  }\n\n  componentDidMount(){\n    this.setBoard();\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}